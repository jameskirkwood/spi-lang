{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "SPI",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"name": "storage.modifier.spi",
			"match": "\\b(extern|forward|static)\\b"
		},
		{
			"include": "#typename"
		},
		{
			"include": "#class"
		},
		{
			"include": "#invalid"
		}
	],
	"repository": {
		"comment": {
			"patterns": [{
				"name": "comment.line.spi",
				"match": "//.*$"
			}]
		},
		"class": {
			"begin": "^(class) ([A-Z]\\w*(\\[\\])?+)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.spi"
				},
				"2": {
					"name": "entity.name.type.spi"
				}
			},
			"end": "^}",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"begin": "^{",
					"end": "^(?=})",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"contentName": "meta.private-section.spi",
							"begin": "^(private:)$",
							"beginCaptures": {
								"1": {
									"name": "storage.modifier.spi"
								}
							},
							"end": "^(?=})",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#member-variable"
								},
								{
									"contentName": "meta.public-section.spi",
									"begin": "^(public:)",
									"beginCaptures": {
										"1": {
											"name": "storage.modifier.spi"
										}
									},
									"end": "^(?=})",
									"patterns": [
										{
											"include": "#comment"
										},
										{
											"include": "#method"
										},
										{
											"include": "#invalid"
										}
									]
								},
								{
									"include": "#invalid"
								}
							]
						},
						{
							"include": "#invalid"
						}
					]
				},
				{
					"include": "#invalid"
				}
			]
		},
		"member-variable": {
			"patterns": [{
				"match": "^    (static )?([A-Z]\\w*(\\[\\])?) [a-z_]\\w*;",
				"captures": {
					"1": {
						"name": "storage.modifier.spi"
					},
					"2": {
						"name": "entity.name.type.spi"
					}
				}
			}]
		},
		"method": {
			"patterns": [{
				"begin": "^    (?:(constructor|static) )?([A-Z]\\w*(\\[\\])?|void) [a-z_]\\w* ?\\(",
				"beginCaptures": {
					"1": {
						"name": "storage.modifier.spi"
					},
					"2": {
						"name": "entity.name.type.spi"
					}
				},
				"end": "^    }",
				"patterns": [
					{
						"name": "invalid.illegal.spi",
						"match": "^.*"
					},
					{
						"match": " ?([A-Z]\\w*(\\[\\])?) [a-z_]\\w* ?(,|(?=\\)))",
						"captures": {
							"1": {
								"name": "entity.name.class"
							}
						}
					},
					{
						"begin": "\\)",
						"end": "^(?=    })",
						"patterns": [
							{
								"include": "#comment"
							},
							{
								"contentName": "meta.method-body.spi",
								"begin": "^    {",
								"end": "^(?=    })",
								"patterns": [
									{
										"include": "#comment"
									},
									{
										"include": "#method-body"
									}
								]
							},
							{
								"include": "#invalid"
							}
						]
					},
					{
						"include": "#invalid"
					}
				]
			}]
		},
		"method-body": {
			"patterns": [
				{
					"include": "#keyword"
				},
				{
					"include": "#symbol"
				},
				{
					"include": "#number"
				},
				{
					"include": "#string"
				},
				{
					"include": "#typename"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.control.spi",
					"match": "\\b(break|case|continue|default|do|elif|else|for|if|new|return|switch|while)\\b"
				},
				{
					"name": "constant.language.spi",
					"match": "\\b(false|this|true)\\b"
				}
			]
		},
		"symbol": {
			"patterns": [{
				"name": "keyword.operator.spi",
				"match": "(#\\+|-|\\*|%|~|/|\\^|&&?|\\|\\|?|<=?|>=?|!=?|==?|<<|>>>?)"
			}]
		},
		"number": {
			"patterns": [{
				"name": "constant.numeric.spi",
				"match": "\\d+(\\.\\d+)?([eE][-+]?\\d+)?"
			}]
		},
		"string": {
			"name": "string.quoted.double.spi",
			"begin": "\"",
			"end": "\"",
			"patterns": [{
				"name": "constant.character.escape.spi",
				"match": "\\\\[\\\\\"'nrt]"
			}]
		},
		"typename": {
			"patterns": [
				{
					"name": "entity.name.type.spi",
					"match": "\\b[A-Z]\\w*\\b(\\[\\])?+"
				},
				{
					"name": "storage.type.spi",
					"match": "\\bvoid\\b"
				}
			]
		},
		"invalid": {
			"patterns": [{
				"name": "invalid.illegal.spi",
				"match": "."
			}]
		}
	},
	"scopeName": "source.spi"
}
